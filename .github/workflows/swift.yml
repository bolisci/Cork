# GitHub Actions Workflow to build the Cork macOS application.
#
# To use this file:
# 1. Create a directory named `.github/workflows` in the root of your repository if it doesn't already exist.
# 2. Save this file inside that directory with a `.yml` extension, for example: `build.yml`.
# 3. Commit and push the file to your repository.
#
# This workflow will automatically run on pushes and pull requests to the 'main' branch.

name: Build Cork App

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
    
  # Triggers the workflow on pull request events for the "main" branch
  pull_request:
    branches: [ "main" ]

jobs:
  # The single job in this workflow, named "build"
  build:
    # A descriptive name for the job that will appear in the GitHub UI
    name: Build macOS App
    
    # The type of runner that the job will run on. For Xcode builds, a macOS runner is required.
    # 'macos-latest' provides the latest stable version of macOS and Xcode.
    runs-on: macos-latest

    steps:
      # Step 1: Check out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Select a specific version of Xcode to use. 
      # While macos-latest comes with a default, explicitly setting it ensures consistency.
      - name: Select latest stable Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      # Step 3: Run the build command.
      # This uses the standard 'xcodebuild' command-line tool.
      # -project: Specifies the Xcode project to build.
      # -scheme: Specifies the build scheme. 'Cork' is the main application target.
      # clean build: 'clean' removes old build files, and 'build' compiles the project.
      - name: Build with xcodebuild
        run: xcodebuild clean build -scheme Cork -project Cork.xcodeproj
